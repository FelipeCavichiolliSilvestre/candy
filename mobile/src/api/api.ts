/* tslint:disable */
/* eslint-disable */
/**
 * Candy API
 * The ecommerce candy API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CheckoutCartBodyDTO
 */
export interface CheckoutCartBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CheckoutCartBodyDTO
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface CheckoutResponseDTO
 */
export interface CheckoutResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponseDTO
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponseDTO
     */
    'checkoutLink': string;
}
/**
 * 
 * @export
 * @interface ClientLoginBodyDTO
 */
export interface ClientLoginBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientLoginBodyDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ClientLoginBodyDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ClientLoginResponseDTO
 */
export interface ClientLoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientLoginResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientLoginResponseDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ClientLoginResponseDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ClientLoginResponseDTO
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ClientLoginResponseDTO
     */
    'jwt': string;
}
/**
 * 
 * @export
 * @interface CreateClientBodyDTO
 */
export interface CreateClientBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateClientBodyDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientBodyDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientBodyDTO
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientBodyDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateEmployeeBodyDTO
 */
export interface CreateEmployeeBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeBodyDTO
     */
    'role': CreateEmployeeBodyDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeBodyDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeBodyDTO
     */
    'password': string;
}

export const CreateEmployeeBodyDTORoleEnum = {
    Cook: 'COOK',
    Deliver: 'DELIVER'
} as const;

export type CreateEmployeeBodyDTORoleEnum = typeof CreateEmployeeBodyDTORoleEnum[keyof typeof CreateEmployeeBodyDTORoleEnum];

/**
 * 
 * @export
 * @interface CreateProductBodyDTO
 */
export interface CreateProductBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateProductBodyDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductBodyDTO
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductBodyDTO
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface EmployeeLoginBodyDTO
 */
export interface EmployeeLoginBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginBodyDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginBodyDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface EmployeeLoginResponseDTO
 */
export interface EmployeeLoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginResponseDTO
     */
    'role': EmployeeLoginResponseDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginResponseDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeLoginResponseDTO
     */
    'jwt': string;
}

export const EmployeeLoginResponseDTORoleEnum = {
    Cook: 'COOK',
    Deliver: 'DELIVER'
} as const;

export type EmployeeLoginResponseDTORoleEnum = typeof EmployeeLoginResponseDTORoleEnum[keyof typeof EmployeeLoginResponseDTORoleEnum];

/**
 * 
 * @export
 * @interface GetClientCartResponseDTO
 */
export interface GetClientCartResponseDTO {
    /**
     * 
     * @type {ProductDTO}
     * @memberof GetClientCartResponseDTO
     */
    'product': ProductDTO;
    /**
     * 
     * @type {number}
     * @memberof GetClientCartResponseDTO
     */
    'quantityOrdered': number;
}
/**
 * 
 * @export
 * @interface GetEmployeesResponseDTO
 */
export interface GetEmployeesResponseDTO {
    /**
     * 
     * @type {Array<SafeEmployeeDTO>}
     * @memberof GetEmployeesResponseDTO
     */
    'employees': Array<SafeEmployeeDTO>;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmployeesResponseDTO
     */
    'hasNextPage': boolean;
}
/**
 * 
 * @export
 * @interface GetProductsResponseDTO
 */
export interface GetProductsResponseDTO {
    /**
     * 
     * @type {boolean}
     * @memberof GetProductsResponseDTO
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {Array<ProductDTO>}
     * @memberof GetProductsResponseDTO
     */
    'products': Array<ProductDTO>;
}
/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface SafeClientDTO
 */
export interface SafeClientDTO {
    /**
     * 
     * @type {string}
     * @memberof SafeClientDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SafeClientDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SafeClientDTO
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof SafeClientDTO
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface SafeEmployeeDTO
 */
export interface SafeEmployeeDTO {
    /**
     * 
     * @type {string}
     * @memberof SafeEmployeeDTO
     */
    'role': SafeEmployeeDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof SafeEmployeeDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SafeEmployeeDTO
     */
    'username': string;
}

export const SafeEmployeeDTORoleEnum = {
    Cook: 'COOK',
    Deliver: 'DELIVER'
} as const;

export type SafeEmployeeDTORoleEnum = typeof SafeEmployeeDTORoleEnum[keyof typeof SafeEmployeeDTORoleEnum];

/**
 * 
 * @export
 * @interface UpdateClientBodyDTO
 */
export interface UpdateClientBodyDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateClientBodyDTO
     */
    'productId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateClientBodyDTO
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface UpdateEmployeeBodyDTO
 */
export interface UpdateEmployeeBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployeeBodyDTO
     */
    'role'?: UpdateEmployeeBodyDTORoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployeeBodyDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployeeBodyDTO
     */
    'password'?: string;
}

export const UpdateEmployeeBodyDTORoleEnum = {
    Cook: 'COOK',
    Deliver: 'DELIVER'
} as const;

export type UpdateEmployeeBodyDTORoleEnum = typeof UpdateEmployeeBodyDTORoleEnum[keyof typeof UpdateEmployeeBodyDTORoleEnum];

/**
 * 
 * @export
 * @interface UpdateProductInfoBodyDTO
 */
export interface UpdateProductInfoBodyDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductInfoBodyDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductInfoBodyDTO
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface UpdateProductPriceDTO
 */
export interface UpdateProductPriceDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateProductPriceDTO
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface UpdateProductQuantityDTO
 */
export interface UpdateProductQuantityDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductQuantityDTO
     */
    'type': UpdateProductQuantityDTOTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductQuantityDTO
     */
    'value': number;
}

export const UpdateProductQuantityDTOTypeEnum = {
    Cooked: 'COOKED',
    Recounted: 'RECOUNTED',
    Expired: 'EXPIRED'
} as const;

export type UpdateProductQuantityDTOTypeEnum = typeof UpdateProductQuantityDTOTypeEnum[keyof typeof UpdateProductQuantityDTOTypeEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientLoginBodyDTO} clientLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLogin: async (clientLoginBodyDTO: ClientLoginBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientLoginBodyDTO' is not null or undefined
            assertParamExists('clientLogin', 'clientLoginBodyDTO', clientLoginBodyDTO)
            const localVarPath = `/clients/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientLoginBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployeeLoginBodyDTO} employeeLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeLogin: async (employeeLoginBodyDTO: EmployeeLoginBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeLoginBodyDTO' is not null or undefined
            assertParamExists('employeeLogin', 'employeeLoginBodyDTO', employeeLoginBodyDTO)
            const localVarPath = `/employees/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeLoginBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClientLoginBodyDTO} clientLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientLogin(clientLoginBodyDTO: ClientLoginBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientLoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientLogin(clientLoginBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.clientLogin']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EmployeeLoginBodyDTO} employeeLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeLogin(employeeLoginBodyDTO: EmployeeLoginBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeLoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeLogin(employeeLoginBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.employeeLogin']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ClientLoginBodyDTO} clientLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLogin(clientLoginBodyDTO: ClientLoginBodyDTO, options?: any): AxiosPromise<ClientLoginResponseDTO> {
            return localVarFp.clientLogin(clientLoginBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmployeeLoginBodyDTO} employeeLoginBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeLogin(employeeLoginBodyDTO: EmployeeLoginBodyDTO, options?: any): AxiosPromise<EmployeeLoginResponseDTO> {
            return localVarFp.employeeLogin(employeeLoginBodyDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ClientLoginBodyDTO} clientLoginBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public clientLogin(clientLoginBodyDTO: ClientLoginBodyDTO, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).clientLogin(clientLoginBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmployeeLoginBodyDTO} employeeLoginBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public employeeLogin(employeeLoginBodyDTO: EmployeeLoginBodyDTO, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).employeeLogin(employeeLoginBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients/me/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateClientBodyDTO} updateClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCart: async (updateClientBodyDTO: UpdateClientBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateClientBodyDTO' is not null or undefined
            assertParamExists('updateUserCart', 'updateClientBodyDTO', updateClientBodyDTO)
            const localVarPath = `/clients/me/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateClientBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetClientCartResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientCart(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CartApi.getClientCart']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateClientBodyDTO} updateClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserCart(updateClientBodyDTO: UpdateClientBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserCart(updateClientBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CartApi.updateUserCart']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientCart(options?: any): AxiosPromise<Array<GetClientCartResponseDTO>> {
            return localVarFp.getClientCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateClientBodyDTO} updateClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCart(updateClientBodyDTO: UpdateClientBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserCart(updateClientBodyDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public getClientCart(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).getClientCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateClientBodyDTO} updateClientBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public updateUserCart(updateClientBodyDTO: UpdateClientBodyDTO, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).updateUserCart(updateClientBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateClientBodyDTO} createClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createClientBodyDTO: CreateClientBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClientBodyDTO' is not null or undefined
            assertParamExists('create', 'createClientBodyDTO', createClientBodyDTO)
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateClientBodyDTO} createClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createClientBodyDTO: CreateClientBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientLoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createClientBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClientsApi.create']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafeClientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClientsApi.getMe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateClientBodyDTO} createClientBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createClientBodyDTO: CreateClientBodyDTO, options?: any): AxiosPromise<ClientLoginResponseDTO> {
            return localVarFp.create(createClientBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<SafeClientDTO> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @param {CreateClientBodyDTO} createClientBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public create(createClientBodyDTO: CreateClientBodyDTO, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).create(createClientBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('_delete', 'employeeId', employeeId)
            const localVarPath = `/employees/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateEmployeeBodyDTO} createEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createEmployeeBodyDTO: CreateEmployeeBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployeeBodyDTO' is not null or undefined
            assertParamExists('create', 'createEmployeeBodyDTO', createEmployeeBodyDTO)
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {UpdateEmployeeBodyDTO} updateEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (employeeId: string, updateEmployeeBodyDTO: UpdateEmployeeBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('update', 'employeeId', employeeId)
            // verify required parameter 'updateEmployeeBodyDTO' is not null or undefined
            assertParamExists('update', 'updateEmployeeBodyDTO', updateEmployeeBodyDTO)
            const localVarPath = `/employees/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(employeeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeesApi._delete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CreateEmployeeBodyDTO} createEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createEmployeeBodyDTO: CreateEmployeeBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafeEmployeeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createEmployeeBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeesApi.create']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmployeesResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeesApi.get']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafeEmployeeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeesApi.getMe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {UpdateEmployeeBodyDTO} updateEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(employeeId: string, updateEmployeeBodyDTO: UpdateEmployeeBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafeEmployeeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(employeeId, updateEmployeeBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmployeesApi.update']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(employeeId: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateEmployeeBodyDTO} createEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createEmployeeBodyDTO: CreateEmployeeBodyDTO, options?: any): AxiosPromise<SafeEmployeeDTO> {
            return localVarFp.create(createEmployeeBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(page?: number, options?: any): AxiosPromise<GetEmployeesResponseDTO> {
            return localVarFp.get(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<SafeEmployeeDTO> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {UpdateEmployeeBodyDTO} updateEmployeeBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(employeeId: string, updateEmployeeBodyDTO: UpdateEmployeeBodyDTO, options?: any): AxiosPromise<SafeEmployeeDTO> {
            return localVarFp.update(employeeId, updateEmployeeBodyDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export class EmployeesApi extends BaseAPI {
    /**
     * 
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public _delete(employeeId: string, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration)._delete(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateEmployeeBodyDTO} createEmployeeBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public create(createEmployeeBodyDTO: CreateEmployeeBodyDTO, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).create(createEmployeeBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public get(page?: number, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).get(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} employeeId 
     * @param {UpdateEmployeeBodyDTO} updateEmployeeBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public update(employeeId: string, updateEmployeeBodyDTO: UpdateEmployeeBodyDTO, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).update(employeeId, updateEmployeeBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckoutCartBodyDTO} checkoutCartBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutCart: async (checkoutCartBodyDTO: CheckoutCartBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkoutCartBodyDTO' is not null or undefined
            assertParamExists('checkoutCart', 'checkoutCartBodyDTO', checkoutCartBodyDTO)
            const localVarPath = `/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutCartBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('checkoutOrder', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/checkout`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CheckoutCartBodyDTO} checkoutCartBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutCart(checkoutCartBodyDTO: CheckoutCartBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutCart(checkoutCartBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.checkoutCart']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutOrder(orderId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.checkoutOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {CheckoutCartBodyDTO} checkoutCartBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutCart(checkoutCartBodyDTO: CheckoutCartBodyDTO, options?: any): AxiosPromise<CheckoutResponseDTO> {
            return localVarFp.checkoutCart(checkoutCartBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutOrder(orderId: string, options?: any): AxiosPromise<CheckoutResponseDTO> {
            return localVarFp.checkoutOrder(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {CheckoutCartBodyDTO} checkoutCartBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public checkoutCart(checkoutCartBodyDTO: CheckoutCartBodyDTO, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).checkoutCart(checkoutCartBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public checkoutOrder(orderId: string, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).checkoutOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProductBodyDTO} createProductBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProductBodyDTO: CreateProductBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductBodyDTO' is not null or undefined
            assertParamExists('createProduct', 'createProductBodyDTO', createProductBodyDTO)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProduct', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductInfoBodyDTO} updateProductInfoBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductInfo: async (productId: number, updateProductInfoBodyDTO: UpdateProductInfoBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductInfo', 'productId', productId)
            // verify required parameter 'updateProductInfoBodyDTO' is not null or undefined
            assertParamExists('updateProductInfo', 'updateProductInfoBodyDTO', updateProductInfoBodyDTO)
            const localVarPath = `/products/{productId}/info`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductInfoBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductPriceDTO} updateProductPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductPrice: async (productId: number, updateProductPriceDTO: UpdateProductPriceDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductPrice', 'productId', productId)
            // verify required parameter 'updateProductPriceDTO' is not null or undefined
            assertParamExists('updateProductPrice', 'updateProductPriceDTO', updateProductPriceDTO)
            const localVarPath = `/products/{productId}/price`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductPriceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductQuantityDTO} updateProductQuantityDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductQuantity: async (productId: number, updateProductQuantityDTO: UpdateProductQuantityDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductQuantity', 'productId', productId)
            // verify required parameter 'updateProductQuantityDTO' is not null or undefined
            assertParamExists('updateProductQuantity', 'updateProductQuantityDTO', updateProductQuantityDTO)
            const localVarPath = `/products/{productId}/quantity`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductQuantityDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProductBodyDTO} createProductBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProductBodyDTO: CreateProductBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProductBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.createProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(productId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.getProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProducts(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProducts(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.listProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductInfoBodyDTO} updateProductInfoBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductInfo(productId: number, updateProductInfoBodyDTO: UpdateProductInfoBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductInfo(productId, updateProductInfoBodyDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.updateProductInfo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductPriceDTO} updateProductPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductPrice(productId: number, updateProductPriceDTO: UpdateProductPriceDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductPrice(productId, updateProductPriceDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.updateProductPrice']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductQuantityDTO} updateProductQuantityDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductQuantity(productId: number, updateProductQuantityDTO: UpdateProductQuantityDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductQuantity(productId, updateProductQuantityDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.updateProductQuantity']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProductBodyDTO} createProductBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(createProductBodyDTO: CreateProductBodyDTO, options?: any): AxiosPromise<ProductDTO> {
            return localVarFp.createProduct(createProductBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productId: number, options?: any): AxiosPromise<ProductDTO> {
            return localVarFp.getProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(page?: number, options?: any): AxiosPromise<GetProductsResponseDTO> {
            return localVarFp.listProducts(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductInfoBodyDTO} updateProductInfoBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductInfo(productId: number, updateProductInfoBodyDTO: UpdateProductInfoBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateProductInfo(productId, updateProductInfoBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductPriceDTO} updateProductPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductPrice(productId: number, updateProductPriceDTO: UpdateProductPriceDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateProductPrice(productId, updateProductPriceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {UpdateProductQuantityDTO} updateProductQuantityDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductQuantity(productId: number, updateProductQuantityDTO: UpdateProductQuantityDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateProductQuantity(productId, updateProductQuantityDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @param {CreateProductBodyDTO} createProductBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public createProduct(createProductBodyDTO: CreateProductBodyDTO, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).createProduct(createProductBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProduct(productId: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public listProducts(page?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).listProducts(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {UpdateProductInfoBodyDTO} updateProductInfoBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProductInfo(productId: number, updateProductInfoBodyDTO: UpdateProductInfoBodyDTO, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).updateProductInfo(productId, updateProductInfoBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {UpdateProductPriceDTO} updateProductPriceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProductPrice(productId: number, updateProductPriceDTO: UpdateProductPriceDTO, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).updateProductPrice(productId, updateProductPriceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {UpdateProductQuantityDTO} updateProductQuantityDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProductQuantity(productId: number, updateProductQuantityDTO: UpdateProductQuantityDTO, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).updateProductQuantity(productId, updateProductQuantityDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



